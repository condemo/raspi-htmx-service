// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: raspi_services.proto

package raspiservices

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	mi := &file_raspi_services_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raspi_services_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_raspi_services_proto_rawDescGZIP(), []int{0}
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status bool             `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Data   *WeatherCardData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_raspi_services_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raspi_services_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_raspi_services_proto_rawDescGZIP(), []int{1}
}

func (x *StatusResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StatusResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StatusResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *StatusResponse) GetData() *WeatherCardData {
	if x != nil {
		return x.Data
	}
	return nil
}

type WeatherCardData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon        string `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	Data        string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	LastUpdated string `protobuf:"bytes,3,opt,name=lastUpdated,proto3" json:"lastUpdated,omitempty"`
}

func (x *WeatherCardData) Reset() {
	*x = WeatherCardData{}
	mi := &file_raspi_services_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WeatherCardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeatherCardData) ProtoMessage() {}

func (x *WeatherCardData) ProtoReflect() protoreflect.Message {
	mi := &file_raspi_services_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeatherCardData.ProtoReflect.Descriptor instead.
func (*WeatherCardData) Descriptor() ([]byte, []int) {
	return file_raspi_services_proto_rawDescGZIP(), []int{2}
}

func (x *WeatherCardData) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *WeatherCardData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *WeatherCardData) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

type FullInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Status   bool            `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Location *Location       `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Current  *CurrentWeather `protobuf:"bytes,5,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *FullInfoResponse) Reset() {
	*x = FullInfoResponse{}
	mi := &file_raspi_services_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullInfoResponse) ProtoMessage() {}

func (x *FullInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raspi_services_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullInfoResponse.ProtoReflect.Descriptor instead.
func (*FullInfoResponse) Descriptor() ([]byte, []int) {
	return file_raspi_services_proto_rawDescGZIP(), []int{3}
}

func (x *FullInfoResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FullInfoResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FullInfoResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *FullInfoResponse) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *FullInfoResponse) GetCurrent() *CurrentWeather {
	if x != nil {
		return x.Current
	}
	return nil
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	City    string          `protobuf:"bytes,1,opt,name=city,proto3" json:"city,omitempty"`
	Region  string          `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Current *CurrentWeather `protobuf:"bytes,3,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	mi := &file_raspi_services_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_raspi_services_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_raspi_services_proto_rawDescGZIP(), []int{4}
}

func (x *Location) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Location) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Location) GetCurrent() *CurrentWeather {
	if x != nil {
		return x.Current
	}
	return nil
}

type CurrentWeather struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition   *ConditionWeather `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	LastUpdated string            `protobuf:"bytes,2,opt,name=lastUpdated,proto3" json:"lastUpdated,omitempty"`
	WindDir     string            `protobuf:"bytes,3,opt,name=windDir,proto3" json:"windDir,omitempty"`
	FeelTemp    float32           `protobuf:"fixed32,4,opt,name=feelTemp,proto3" json:"feelTemp,omitempty"`
	Temp        float32           `protobuf:"fixed32,5,opt,name=temp,proto3" json:"temp,omitempty"`
	WindVel     float32           `protobuf:"fixed32,6,opt,name=windVel,proto3" json:"windVel,omitempty"`
	IsDay       uint32            `protobuf:"varint,7,opt,name=isDay,proto3" json:"isDay,omitempty"`
}

func (x *CurrentWeather) Reset() {
	*x = CurrentWeather{}
	mi := &file_raspi_services_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrentWeather) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentWeather) ProtoMessage() {}

func (x *CurrentWeather) ProtoReflect() protoreflect.Message {
	mi := &file_raspi_services_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentWeather.ProtoReflect.Descriptor instead.
func (*CurrentWeather) Descriptor() ([]byte, []int) {
	return file_raspi_services_proto_rawDescGZIP(), []int{5}
}

func (x *CurrentWeather) GetCondition() *ConditionWeather {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *CurrentWeather) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

func (x *CurrentWeather) GetWindDir() string {
	if x != nil {
		return x.WindDir
	}
	return ""
}

func (x *CurrentWeather) GetFeelTemp() float32 {
	if x != nil {
		return x.FeelTemp
	}
	return 0
}

func (x *CurrentWeather) GetTemp() float32 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *CurrentWeather) GetWindVel() float32 {
	if x != nil {
		return x.WindVel
	}
	return 0
}

func (x *CurrentWeather) GetIsDay() uint32 {
	if x != nil {
		return x.IsDay
	}
	return 0
}

type ConditionWeather struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Icon string `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *ConditionWeather) Reset() {
	*x = ConditionWeather{}
	mi := &file_raspi_services_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConditionWeather) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionWeather) ProtoMessage() {}

func (x *ConditionWeather) ProtoReflect() protoreflect.Message {
	mi := &file_raspi_services_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionWeather.ProtoReflect.Descriptor instead.
func (*ConditionWeather) Descriptor() ([]byte, []int) {
	return file_raspi_services_proto_rawDescGZIP(), []int{6}
}

func (x *ConditionWeather) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ConditionWeather) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

type ConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	mi := &file_raspi_services_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_raspi_services_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_raspi_services_proto_rawDescGZIP(), []int{7}
}

type ConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigResponse) Reset() {
	*x = ConfigResponse{}
	mi := &file_raspi_services_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigResponse) ProtoMessage() {}

func (x *ConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raspi_services_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigResponse.ProtoReflect.Descriptor instead.
func (*ConfigResponse) Descriptor() ([]byte, []int) {
	return file_raspi_services_proto_rawDescGZIP(), []int{8}
}

var File_raspi_services_proto protoreflect.FileDescriptor

var file_raspi_services_proto_rawDesc = []byte{
	0x0a, 0x14, 0x72, 0x61, 0x73, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x72, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5b, 0x0a, 0x0f, 0x57, 0x65,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x10, 0x46, 0x75, 0x6c, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x61, 0x0a, 0x08, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xdd, 0x01,
	0x0a, 0x0e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x12, 0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x65, 0x65, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x66, 0x65, 0x65, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x77, 0x69, 0x6e, 0x64, 0x56, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x77, 0x69, 0x6e, 0x64, 0x56, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x44, 0x61, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x73, 0x44, 0x61, 0x79, 0x22, 0x3a, 0x0a,
	0x10, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x0f, 0x0a, 0x0d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x10, 0x0a, 0x0e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa9, 0x02, 0x0a,
	0x0e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x0d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x04, 0x53, 0x74,
	0x6f, 0x70, 0x12, 0x0d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x0d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x45, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x65, 0x6d, 0x6f, 0x2f, 0x72,
	0x61, 0x73, 0x70, 0x69, 0x2d, 0x68, 0x74, 0x6d, 0x78, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x72, 0x61, 0x73, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_raspi_services_proto_rawDescOnce sync.Once
	file_raspi_services_proto_rawDescData = file_raspi_services_proto_rawDesc
)

func file_raspi_services_proto_rawDescGZIP() []byte {
	file_raspi_services_proto_rawDescOnce.Do(func() {
		file_raspi_services_proto_rawDescData = protoimpl.X.CompressGZIP(file_raspi_services_proto_rawDescData)
	})
	return file_raspi_services_proto_rawDescData
}

var file_raspi_services_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_raspi_services_proto_goTypes = []any{
	(*EmptyRequest)(nil),     // 0: EmptyRequest
	(*StatusResponse)(nil),   // 1: StatusResponse
	(*WeatherCardData)(nil),  // 2: WeatherCardData
	(*FullInfoResponse)(nil), // 3: FullInfoResponse
	(*Location)(nil),         // 4: Location
	(*CurrentWeather)(nil),   // 5: CurrentWeather
	(*ConditionWeather)(nil), // 6: ConditionWeather
	(*ConfigRequest)(nil),    // 7: ConfigRequest
	(*ConfigResponse)(nil),   // 8: ConfigResponse
}
var file_raspi_services_proto_depIdxs = []int32{
	2,  // 0: StatusResponse.data:type_name -> WeatherCardData
	4,  // 1: FullInfoResponse.location:type_name -> Location
	5,  // 2: FullInfoResponse.current:type_name -> CurrentWeather
	5,  // 3: Location.current:type_name -> CurrentWeather
	6,  // 4: CurrentWeather.condition:type_name -> ConditionWeather
	0,  // 5: WeatherService.Start:input_type -> EmptyRequest
	0,  // 6: WeatherService.Stop:input_type -> EmptyRequest
	0,  // 7: WeatherService.GetStatus:input_type -> EmptyRequest
	0,  // 8: WeatherService.GetFullInfo:input_type -> EmptyRequest
	0,  // 9: WeatherService.GetConfig:input_type -> EmptyRequest
	7,  // 10: WeatherService.UpdateConfig:input_type -> ConfigRequest
	1,  // 11: WeatherService.Start:output_type -> StatusResponse
	1,  // 12: WeatherService.Stop:output_type -> StatusResponse
	1,  // 13: WeatherService.GetStatus:output_type -> StatusResponse
	3,  // 14: WeatherService.GetFullInfo:output_type -> FullInfoResponse
	8,  // 15: WeatherService.GetConfig:output_type -> ConfigResponse
	8,  // 16: WeatherService.UpdateConfig:output_type -> ConfigResponse
	11, // [11:17] is the sub-list for method output_type
	5,  // [5:11] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_raspi_services_proto_init() }
func file_raspi_services_proto_init() {
	if File_raspi_services_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_raspi_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_raspi_services_proto_goTypes,
		DependencyIndexes: file_raspi_services_proto_depIdxs,
		MessageInfos:      file_raspi_services_proto_msgTypes,
	}.Build()
	File_raspi_services_proto = out.File
	file_raspi_services_proto_rawDesc = nil
	file_raspi_services_proto_goTypes = nil
	file_raspi_services_proto_depIdxs = nil
}
